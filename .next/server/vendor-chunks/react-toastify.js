"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-toastify";
exports.ids = ["vendor-chunks/react-toastify"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-toastify/esm/react-toastify.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-toastify/esm/react-toastify.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bounce: () => (/* binding */ Bounce),\n/* harmony export */   Flip: () => (/* binding */ Flip),\n/* harmony export */   Slide: () => (/* binding */ Slide),\n/* harmony export */   ToastContainer: () => (/* binding */ ToastContainer),\n/* harmony export */   ToastPosition: () => (/* binding */ POSITION),\n/* harmony export */   ToastType: () => (/* binding */ TYPE),\n/* harmony export */   Zoom: () => (/* binding */ Zoom),\n/* harmony export */   cssTransition: () => (/* binding */ cssTransition),\n/* harmony export */   toast: () => (/* binding */ toast)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_transition_group__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-transition-group */ \"(ssr)/./node_modules/react-transition-group/esm/Transition.js\");\n/* harmony import */ var react_transition_group__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-transition-group */ \"(ssr)/./node_modules/react-transition-group/esm/TransitionGroup.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\nvar POSITION = {\n    TOP_LEFT: \"top-left\",\n    TOP_RIGHT: \"top-right\",\n    TOP_CENTER: \"top-center\",\n    BOTTOM_LEFT: \"bottom-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    BOTTOM_CENTER: \"bottom-center\"\n};\nvar TYPE = {\n    INFO: \"info\",\n    SUCCESS: \"success\",\n    WARNING: \"warning\",\n    ERROR: \"error\",\n    DEFAULT: \"default\"\n};\nvar ACTION = {\n    SHOW: 0,\n    CLEAR: 1,\n    DID_MOUNT: 2,\n    WILL_UNMOUNT: 3,\n    ON_CHANGE: 4\n};\nvar NOOP = function NOOP() {};\nvar RT_NAMESPACE = \"Toastify\";\nfunction isValidDelay(val) {\n    return typeof val === \"number\" && !isNaN(val) && val > 0;\n}\nfunction objectValues(obj) {\n    return Object.keys(obj).map(function(key) {\n        return obj[key];\n    });\n}\nvar canUseDom = !!( false && 0);\nfunction withRequired(fn) {\n    fn.isRequired = function(props, propName, componentName) {\n        var prop = props[propName];\n        if (typeof prop === \"undefined\") {\n            return new Error(\"The prop \" + propName + \" is marked as required in \\n      \" + componentName + \", but its value is undefined.\");\n        }\n        fn(props, propName, componentName);\n    };\n    return fn;\n}\nvar falseOrDelay = withRequired(function(props, propName, componentName) {\n    var prop = props[propName];\n    if (prop !== false && !isValidDelay(prop)) {\n        return new Error(componentName + \" expect \" + propName + \" \\n      to be a valid Number > 0 or equal to false. \" + prop + \" given.\");\n    }\n    return null;\n});\nvar eventManager = {\n    list: new Map(),\n    emitQueue: new Map(),\n    on: function on(event, callback) {\n        this.list.has(event) || this.list.set(event, []);\n        this.list.get(event).push(callback);\n        return this;\n    },\n    off: function off(event) {\n        this.list.delete(event);\n        return this;\n    },\n    cancelEmit: function cancelEmit(event) {\n        var timers = this.emitQueue.get(event);\n        if (timers) {\n            timers.forEach(function(timer) {\n                return clearTimeout(timer);\n            });\n            this.emitQueue.delete(event);\n        }\n        return this;\n    },\n    /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */ emit: function emit(event) {\n        var _this = this;\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        this.list.has(event) && this.list.get(event).forEach(function(callback) {\n            var timer = setTimeout(function() {\n                callback.apply(void 0, args);\n            }, 0);\n            _this.emitQueue.has(event) || _this.emitQueue.set(event, []);\n            _this.emitQueue.get(event).push(timer);\n        });\n    }\n};\nfunction cssTransition(_ref) {\n    var enter = _ref.enter, exit = _ref.exit, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? 750 : _ref$duration, _ref$appendPosition = _ref.appendPosition, appendPosition = _ref$appendPosition === void 0 ? false : _ref$appendPosition;\n    return function Animation(_ref2) {\n        var children = _ref2.children, position = _ref2.position, preventExitTransition = _ref2.preventExitTransition, props = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref2, [\n            \"children\",\n            \"position\",\n            \"preventExitTransition\"\n        ]);\n        var enterClassName = appendPosition ? enter + \"--\" + position : enter;\n        var exitClassName = appendPosition ? exit + \"--\" + position : exit;\n        var enterDuration, exitDuration;\n        if (Array.isArray(duration) && duration.length === 2) {\n            enterDuration = duration[0];\n            exitDuration = duration[1];\n        } else {\n            enterDuration = exitDuration = duration;\n        }\n        var onEnter = function onEnter(node) {\n            node.classList.add(enterClassName);\n            node.style.animationFillMode = \"forwards\";\n            node.style.animationDuration = enterDuration * 0.001 + \"s\";\n        };\n        var onEntered = function onEntered(node) {\n            node.classList.remove(enterClassName);\n            node.style.cssText = \"\";\n        };\n        var onExit = function onExit(node) {\n            node.classList.add(exitClassName);\n            node.style.animationFillMode = \"forwards\";\n            node.style.animationDuration = exitDuration * 0.001 + \"s\";\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(react_transition_group__WEBPACK_IMPORTED_MODULE_6__[\"default\"], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n            timeout: preventExitTransition ? 0 : {\n                enter: enterDuration,\n                exit: exitDuration\n            },\n            onEnter: onEnter,\n            onEntered: onEntered,\n            onExit: preventExitTransition ? NOOP : onExit\n        }), children);\n    };\n}\nfunction ProgressBar(_ref) {\n    var _cx, _animationEvent;\n    var delay = _ref.delay, isRunning = _ref.isRunning, closeToast = _ref.closeToast, type = _ref.type, hide = _ref.hide, className = _ref.className, userStyle = _ref.style, controlledProgress = _ref.controlledProgress, progress = _ref.progress, rtl = _ref.rtl;\n    var style = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, userStyle, {\n        animationDuration: delay + \"ms\",\n        animationPlayState: isRunning ? \"running\" : \"paused\",\n        opacity: hide ? 0 : 1,\n        transform: controlledProgress ? \"scaleX(\" + progress + \")\" : null\n    });\n    var classNames = classnames__WEBPACK_IMPORTED_MODULE_4___default()(RT_NAMESPACE + \"__progress-bar\", controlledProgress ? RT_NAMESPACE + \"__progress-bar--controlled\" : RT_NAMESPACE + \"__progress-bar--animated\", RT_NAMESPACE + \"__progress-bar--\" + type, (_cx = {}, _cx[RT_NAMESPACE + \"__progress-bar--rtl\"] = rtl, _cx), className);\n    var animationEvent = (_animationEvent = {}, _animationEvent[controlledProgress && progress >= 1 ? \"onTransitionEnd\" : \"onAnimationEnd\"] = controlledProgress && progress < 1 ? null : closeToast, _animationEvent);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        className: classNames,\n        style: style\n    }, animationEvent));\n}\nProgressBar.propTypes = {\n    /**\n   * The animation delay which determine when to close the toast\n   */ delay: falseOrDelay.isRequired,\n    /**\n   * Whether or not the animation is running or paused\n   */ isRunning: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    /**\n   * Func to close the current toast\n   */ closeToast: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n    /**\n   * Support rtl content\n   */ rtl: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    /**\n   * Optional type : info, success ...\n   */ type: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    /**\n   * Hide or not the progress bar\n   */ hide: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Optionnal className\n   */ className: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    /**\n   * Controlled progress value\n   */ progress: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    /**\n   * Tell wether or not controlled progress bar is used\n   */ controlledProgress: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool)\n};\nProgressBar.defaultProps = {\n    type: TYPE.DEFAULT,\n    hide: false\n};\nfunction getX(e) {\n    return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;\n}\nfunction getY(e) {\n    return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;\n}\nvar iLoveInternetExplorer = canUseDom && /(msie|trident)/i.test(navigator.userAgent);\nvar Toast = /*#__PURE__*/ function(_Component) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Toast, _Component);\n    function Toast() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _Component.call.apply(_Component, [\n            this\n        ].concat(args)) || this;\n        _this.state = {\n            isRunning: true,\n            preventExitTransition: false\n        };\n        _this.flag = {\n            canCloseOnClick: true,\n            canDrag: false\n        };\n        _this.drag = {\n            start: 0,\n            x: 0,\n            y: 0,\n            deltaX: 0,\n            removalDistance: 0\n        };\n        _this.boundingRect = null;\n        _this.ref = null;\n        _this.pauseToast = function() {\n            if (_this.props.autoClose) {\n                _this.setState({\n                    isRunning: false\n                });\n            }\n        };\n        _this.playToast = function() {\n            if (_this.props.autoClose) {\n                _this.setState({\n                    isRunning: true\n                });\n            }\n        };\n        _this.onDragStart = function(e) {\n            _this.flag.canCloseOnClick = true;\n            _this.flag.canDrag = true;\n            _this.boundingRect = _this.ref.getBoundingClientRect();\n            _this.ref.style.transition = \"\";\n            _this.drag.start = _this.drag.x = getX(e.nativeEvent);\n            _this.drag.removalDistance = _this.ref.offsetWidth * (_this.props.draggablePercent / 100);\n        };\n        _this.onDragMove = function(e) {\n            if (_this.flag.canDrag) {\n                if (_this.state.isRunning) {\n                    _this.pauseToast();\n                }\n                _this.drag.x = getX(e);\n                _this.drag.deltaX = _this.drag.x - _this.drag.start;\n                _this.drag.y = getY(e); // prevent false positif during a toast click\n                _this.drag.start !== _this.drag.x && (_this.flag.canCloseOnClick = false);\n                _this.ref.style.transform = \"translateX(\" + _this.drag.deltaX + \"px)\";\n                _this.ref.style.opacity = 1 - Math.abs(_this.drag.deltaX / _this.drag.removalDistance);\n            }\n        };\n        _this.onDragEnd = function(e) {\n            if (_this.flag.canDrag) {\n                _this.flag.canDrag = false;\n                if (Math.abs(_this.drag.deltaX) > _this.drag.removalDistance) {\n                    _this.setState({\n                        preventExitTransition: true\n                    }, _this.props.closeToast);\n                    return;\n                }\n                _this.ref.style.transition = \"transform 0.2s, opacity 0.2s\";\n                _this.ref.style.transform = \"translateX(0)\";\n                _this.ref.style.opacity = 1;\n            }\n        };\n        _this.onDragTransitionEnd = function() {\n            if (_this.boundingRect) {\n                var _this$boundingRect = _this.boundingRect, top = _this$boundingRect.top, bottom = _this$boundingRect.bottom, left = _this$boundingRect.left, right = _this$boundingRect.right;\n                if (_this.props.pauseOnHover && _this.drag.x >= left && _this.drag.x <= right && _this.drag.y >= top && _this.drag.y <= bottom) {\n                    _this.pauseToast();\n                } else {\n                    _this.playToast();\n                }\n            }\n        };\n        _this.onExitTransitionEnd = function() {\n            if (iLoveInternetExplorer) {\n                _this.props.onExited();\n                return;\n            }\n            var height = _this.ref.scrollHeight;\n            var style = _this.ref.style;\n            requestAnimationFrame(function() {\n                style.minHeight = \"initial\";\n                style.height = height + \"px\";\n                style.transition = \"all 0.4s \";\n                requestAnimationFrame(function() {\n                    style.height = 0;\n                    style.padding = 0;\n                    style.margin = 0;\n                });\n                setTimeout(function() {\n                    return _this.props.onExited();\n                }, 400);\n            });\n        };\n        return _this;\n    }\n    var _proto = Toast.prototype;\n    _proto.componentDidMount = function componentDidMount() {\n        this.props.onOpen(this.props.children.props);\n        if (this.props.draggable) {\n            this.bindDragEvents();\n        } // Maybe I could bind the event in the ToastContainer and rely on delegation\n        if (this.props.pauseOnFocusLoss) {\n            this.bindFocusEvents();\n        }\n    };\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n        if (prevProps.draggable !== this.props.draggable) {\n            if (this.props.draggable) {\n                this.bindDragEvents();\n            } else {\n                this.unbindDragEvents();\n            }\n        }\n        if (prevProps.pauseOnFocusLoss !== this.props.pauseOnFocusLoss) {\n            if (this.props.pauseOnFocusLoss) {\n                this.bindFocusEvents();\n            } else {\n                this.unbindFocusEvents();\n            }\n        }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.props.onClose(this.props.children.props);\n        if (this.props.draggable) {\n            this.unbindDragEvents();\n        }\n        if (this.props.pauseOnFocusLoss) {\n            this.unbindFocusEvents();\n        }\n    };\n    _proto.bindFocusEvents = function bindFocusEvents() {\n        window.addEventListener(\"focus\", this.playToast);\n        window.addEventListener(\"blur\", this.pauseToast);\n    };\n    _proto.unbindFocusEvents = function unbindFocusEvents() {\n        window.removeEventListener(\"focus\", this.playToast);\n        window.removeEventListener(\"blur\", this.pauseToast);\n    };\n    _proto.bindDragEvents = function bindDragEvents() {\n        document.addEventListener(\"mousemove\", this.onDragMove);\n        document.addEventListener(\"mouseup\", this.onDragEnd);\n        document.addEventListener(\"touchmove\", this.onDragMove);\n        document.addEventListener(\"touchend\", this.onDragEnd);\n    };\n    _proto.unbindDragEvents = function unbindDragEvents() {\n        document.removeEventListener(\"mousemove\", this.onDragMove);\n        document.removeEventListener(\"mouseup\", this.onDragEnd);\n        document.removeEventListener(\"touchmove\", this.onDragMove);\n        document.removeEventListener(\"touchend\", this.onDragEnd);\n    };\n    _proto.render = function render() {\n        var _cx, _this2 = this;\n        var _this$props = this.props, closeButton = _this$props.closeButton, children = _this$props.children, autoClose = _this$props.autoClose, pauseOnHover = _this$props.pauseOnHover, onClick = _this$props.onClick, closeOnClick = _this$props.closeOnClick, type = _this$props.type, hideProgressBar = _this$props.hideProgressBar, closeToast = _this$props.closeToast, Transition = _this$props.transition, position = _this$props.position, className = _this$props.className, bodyClassName = _this$props.bodyClassName, progressClassName = _this$props.progressClassName, progressStyle = _this$props.progressStyle, updateId = _this$props.updateId, role = _this$props.role, progress = _this$props.progress, rtl = _this$props.rtl;\n        var toastProps = {\n            className: classnames__WEBPACK_IMPORTED_MODULE_4___default()(RT_NAMESPACE + \"__toast\", RT_NAMESPACE + \"__toast--\" + type, (_cx = {}, _cx[RT_NAMESPACE + \"__toast--rtl\"] = rtl, _cx), className)\n        };\n        if (autoClose && pauseOnHover) {\n            toastProps.onMouseEnter = this.pauseToast;\n            toastProps.onMouseLeave = this.playToast;\n        } // prevent toast from closing when user drags the toast\n        if (closeOnClick) {\n            toastProps.onClick = function(e) {\n                onClick && onClick(e);\n                _this2.flag.canCloseOnClick && closeToast();\n            };\n        }\n        var controlledProgress = parseFloat(progress) === progress;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Transition, {\n            in: this.props.in,\n            appear: true,\n            onExited: this.onExitTransitionEnd,\n            position: position,\n            preventExitTransition: this.state.preventExitTransition\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            onClick: onClick\n        }, toastProps, {\n            ref: function ref(_ref) {\n                return _this2.ref = _ref;\n            },\n            onMouseDown: this.onDragStart,\n            onTouchStart: this.onDragStart,\n            onMouseUp: this.onDragTransitionEnd,\n            onTouchEnd: this.onDragTransitionEnd\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, this.props.in && {\n            role: role\n        }, {\n            className: classnames__WEBPACK_IMPORTED_MODULE_4___default()(RT_NAMESPACE + \"__toast-body\", bodyClassName)\n        }), children), closeButton && closeButton, (autoClose || controlledProgress) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ProgressBar, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, updateId && !controlledProgress ? {\n            key: \"pb-\" + updateId\n        } : {}, {\n            rtl: rtl,\n            delay: autoClose,\n            isRunning: this.state.isRunning,\n            closeToast: closeToast,\n            hide: hideProgressBar,\n            type: type,\n            style: progressStyle,\n            className: progressClassName,\n            controlledProgress: controlledProgress,\n            progress: progress\n        }))));\n    };\n    return Toast;\n}(react__WEBPACK_IMPORTED_MODULE_3__.Component);\nToast.propTypes = {\n    closeButton: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().node),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool)\n    ]).isRequired,\n    autoClose: falseOrDelay.isRequired,\n    children: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().node).isRequired,\n    closeToast: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n    position: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOf(objectValues(POSITION)).isRequired,\n    pauseOnHover: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    pauseOnFocusLoss: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    closeOnClick: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    transition: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n    rtl: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    hideProgressBar: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    draggable: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool).isRequired,\n    draggablePercent: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number).isRequired,\n    in: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    onExited: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onClose: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    type: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOf(objectValues(TYPE)),\n    className: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    bodyClassName: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    progressClassName: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    progressStyle: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object),\n    progress: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    updateId: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number)\n    ]),\n    ariaLabel: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    containerId: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number)\n    ]),\n    role: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string)\n};\nToast.defaultProps = {\n    type: TYPE.DEFAULT,\n    in: true,\n    onOpen: NOOP,\n    onClose: NOOP,\n    className: null,\n    bodyClassName: null,\n    progressClassName: null,\n    updateId: null\n};\nfunction CloseButton(_ref) {\n    var closeToast = _ref.closeToast, type = _ref.type, ariaLabel = _ref.ariaLabel;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"button\", {\n        className: RT_NAMESPACE + \"__close-button \" + RT_NAMESPACE + \"__close-button--\" + type,\n        type: \"button\",\n        onClick: function onClick(e) {\n            e.stopPropagation();\n            closeToast(e);\n        },\n        \"aria-label\": ariaLabel\n    }, \"✖︎\");\n}\nCloseButton.propTypes = {\n    closeToast: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    arialLabel: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string)\n};\nCloseButton.defaultProps = {\n    ariaLabel: \"close\"\n};\nvar Bounce = cssTransition({\n    enter: RT_NAMESPACE + \"__bounce-enter\",\n    exit: RT_NAMESPACE + \"__bounce-exit\",\n    appendPosition: true\n});\nvar Slide = cssTransition({\n    enter: RT_NAMESPACE + \"__slide-enter\",\n    exit: RT_NAMESPACE + \"__slide-exit\",\n    duration: [\n        450,\n        750\n    ],\n    appendPosition: true\n});\nvar Zoom = cssTransition({\n    enter: RT_NAMESPACE + \"__zoom-enter\",\n    exit: RT_NAMESPACE + \"__zoom-exit\"\n});\nvar Flip = cssTransition({\n    enter: RT_NAMESPACE + \"__flip-enter\",\n    exit: RT_NAMESPACE + \"__flip-exit\"\n});\nvar ToastContainer = /*#__PURE__*/ function(_Component) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ToastContainer, _Component);\n    function ToastContainer() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _Component.call.apply(_Component, [\n            this\n        ].concat(args)) || this;\n        _this.state = {\n            toast: []\n        };\n        _this.toastKey = 1;\n        _this.collection = {};\n        _this.isToastActive = function(id) {\n            return _this.state.toast.indexOf(id) !== -1;\n        };\n        return _this;\n    }\n    var _proto = ToastContainer.prototype;\n    _proto.componentDidMount = function componentDidMount() {\n        var _this2 = this;\n        eventManager.cancelEmit(ACTION.WILL_UNMOUNT).on(ACTION.SHOW, function(content, options) {\n            return _this2.ref ? _this2.buildToast(content, options) : null;\n        }).on(ACTION.CLEAR, function(id) {\n            return !_this2.ref ? null : id == null ? _this2.clear() : _this2.removeToast(id);\n        }).emit(ACTION.DID_MOUNT, this);\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        eventManager.emit(ACTION.WILL_UNMOUNT, this);\n    };\n    _proto.removeToast = function removeToast(id) {\n        this.setState({\n            toast: this.state.toast.filter(function(v) {\n                return v !== id;\n            })\n        }, this.dispatchChange);\n    };\n    _proto.dispatchChange = function dispatchChange() {\n        eventManager.emit(ACTION.ON_CHANGE, this.state.toast.length, this.props.containerId);\n    };\n    _proto.makeCloseButton = function makeCloseButton(toastClose, toastId, type) {\n        var _this3 = this;\n        var closeButton = this.props.closeButton;\n        if (/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(toastClose) || toastClose === false) {\n            closeButton = toastClose;\n        } else if (toastClose === true) {\n            closeButton = this.props.closeButton && typeof this.props.closeButton !== \"boolean\" ? this.props.closeButton : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(CloseButton, null);\n        }\n        return closeButton === false ? false : /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.cloneElement)(closeButton, {\n            closeToast: function closeToast() {\n                return _this3.removeToast(toastId);\n            },\n            type: type\n        });\n    };\n    _proto.getAutoCloseDelay = function getAutoCloseDelay(toastAutoClose) {\n        return toastAutoClose === false || isValidDelay(toastAutoClose) ? toastAutoClose : this.props.autoClose;\n    };\n    _proto.canBeRendered = function canBeRendered(content) {\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(content) || typeof content === \"string\" || typeof content === \"number\" || typeof content === \"function\";\n    };\n    _proto.parseClassName = function parseClassName(prop) {\n        if (typeof prop === \"string\") {\n            return prop;\n        } else if (prop !== null && typeof prop === \"object\" && \"toString\" in prop) {\n            return prop.toString();\n        }\n        return null;\n    };\n    _proto.belongToContainer = function belongToContainer(_ref) {\n        var containerId = _ref.containerId;\n        return containerId === this.props.containerId;\n    };\n    _proto.buildToast = function buildToast(content, _ref2) {\n        var _this4 = this;\n        var delay = _ref2.delay, options = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref2, [\n            \"delay\"\n        ]);\n        if (!this.canBeRendered(content)) {\n            throw new Error(\"The element you provided cannot be rendered. You provided an element of type \" + typeof content);\n        }\n        var toastId = options.toastId, updateId = options.updateId; // Check for multi-container and also for duplicate toastId\n        // Maybe it would be better to extract it\n        if (this.props.enableMultiContainer && !this.belongToContainer(options) || this.isToastActive(toastId) && updateId == null) {\n            return;\n        }\n        var closeToast = function closeToast() {\n            return _this4.removeToast(toastId);\n        };\n        var toastOptions = {\n            id: toastId,\n            // ⚠️ if no options.key, this.toastKey - 1 is assigned\n            key: options.key || this.toastKey++,\n            type: options.type,\n            closeToast: closeToast,\n            updateId: options.updateId,\n            rtl: this.props.rtl,\n            position: options.position || this.props.position,\n            transition: options.transition || this.props.transition,\n            className: this.parseClassName(options.className || this.props.toastClassName),\n            bodyClassName: this.parseClassName(options.bodyClassName || this.props.bodyClassName),\n            onClick: options.onClick || this.props.onClick,\n            closeButton: this.makeCloseButton(options.closeButton, toastId, options.type),\n            pauseOnHover: typeof options.pauseOnHover === \"boolean\" ? options.pauseOnHover : this.props.pauseOnHover,\n            pauseOnFocusLoss: typeof options.pauseOnFocusLoss === \"boolean\" ? options.pauseOnFocusLoss : this.props.pauseOnFocusLoss,\n            draggable: typeof options.draggable === \"boolean\" ? options.draggable : this.props.draggable,\n            draggablePercent: typeof options.draggablePercent === \"number\" && !isNaN(options.draggablePercent) ? options.draggablePercent : this.props.draggablePercent,\n            closeOnClick: typeof options.closeOnClick === \"boolean\" ? options.closeOnClick : this.props.closeOnClick,\n            progressClassName: this.parseClassName(options.progressClassName || this.props.progressClassName),\n            progressStyle: this.props.progressStyle,\n            autoClose: this.getAutoCloseDelay(options.autoClose),\n            hideProgressBar: typeof options.hideProgressBar === \"boolean\" ? options.hideProgressBar : this.props.hideProgressBar,\n            progress: parseFloat(options.progress),\n            role: typeof options.role === \"string\" ? options.role : this.props.role\n        };\n        typeof options.onOpen === \"function\" && (toastOptions.onOpen = options.onOpen);\n        typeof options.onClose === \"function\" && (toastOptions.onClose = options.onClose); // add closeToast function to react component only\n        if (/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(content) && typeof content.type !== \"string\" && typeof content.type !== \"number\") {\n            content = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.cloneElement)(content, {\n                closeToast: closeToast\n            });\n        } else if (typeof content === \"function\") {\n            content = content({\n                closeToast: closeToast\n            });\n        }\n        if (isValidDelay(delay)) {\n            setTimeout(function() {\n                _this4.appendToast(toastOptions, content, options.staleToastId);\n            }, delay);\n        } else {\n            this.appendToast(toastOptions, content, options.staleToastId);\n        }\n    };\n    _proto.appendToast = function appendToast(options, content, staleToastId) {\n        var _extends2;\n        var id = options.id, updateId = options.updateId;\n        this.collection = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, this.collection, (_extends2 = {}, _extends2[id] = {\n            options: options,\n            content: content,\n            position: options.position\n        }, _extends2));\n        this.setState({\n            toast: (updateId ? [].concat(this.state.toast) : [].concat(this.state.toast, [\n                id\n            ])).filter(function(id) {\n                return id !== staleToastId;\n            })\n        }, this.dispatchChange);\n    };\n    _proto.clear = function clear() {\n        this.setState({\n            toast: []\n        });\n    };\n    _proto.renderToast = function renderToast() {\n        var _this5 = this;\n        var toastToRender = {};\n        var _this$props = this.props, className = _this$props.className, style = _this$props.style, newestOnTop = _this$props.newestOnTop;\n        var collection = newestOnTop ? Object.keys(this.collection).reverse() : Object.keys(this.collection); // group toast by position\n        collection.forEach(function(toastId) {\n            var _this5$collection$toa = _this5.collection[toastId], position = _this5$collection$toa.position, options = _this5$collection$toa.options, content = _this5$collection$toa.content;\n            toastToRender[position] || (toastToRender[position] = []);\n            if (_this5.state.toast.indexOf(options.id) !== -1) {\n                toastToRender[position].push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Toast, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n                    isDocumentHidden: _this5.state.isDocumentHidden,\n                    key: \"toast-\" + options.key\n                }), content));\n            } else {\n                toastToRender[position].push(null);\n                delete _this5.collection[toastId];\n            }\n        });\n        return Object.keys(toastToRender).map(function(position) {\n            var _cx;\n            var disablePointer = toastToRender[position].length === 1 && toastToRender[position][0] === null;\n            var props = {\n                className: classnames__WEBPACK_IMPORTED_MODULE_4___default()(RT_NAMESPACE + \"__toast-container\", RT_NAMESPACE + \"__toast-container--\" + position, (_cx = {}, _cx[RT_NAMESPACE + \"__toast-container--rtl\"] = _this5.props.rtl, _cx), _this5.parseClassName(className)),\n                style: disablePointer ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, style, {\n                    pointerEvents: \"none\"\n                }) : (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, style)\n            };\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(react_transition_group__WEBPACK_IMPORTED_MODULE_8__[\"default\"], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n                key: \"container-\" + position\n            }), toastToRender[position]);\n        });\n    };\n    _proto.render = function render() {\n        var _this6 = this;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", {\n            ref: function ref(node) {\n                return _this6.ref = node;\n            },\n            className: \"\" + RT_NAMESPACE\n        }, this.renderToast());\n    };\n    return ToastContainer;\n}(react__WEBPACK_IMPORTED_MODULE_3__.Component);\nToastContainer.propTypes = {\n    /**\n   * Set toast position\n   */ position: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOf(objectValues(POSITION)),\n    /**\n   * Disable or set autoClose delay\n   */ autoClose: falseOrDelay,\n    /**\n   * Disable or set a custom react element for the close button\n   */ closeButton: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().node),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool)\n    ]),\n    /**\n   * Hide or not progress bar when autoClose is enabled\n   */ hideProgressBar: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Pause toast duration on hover\n   */ pauseOnHover: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Dismiss toast on click\n   */ closeOnClick: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Newest on top\n   */ newestOnTop: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * An optional className\n   */ className: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    /**\n   * An optional style\n   */ style: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object),\n    /**\n   * An optional className for the toast\n   */ toastClassName: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    /**\n   * An optional className for the toast body\n   */ bodyClassName: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    /**\n   * An optional className for the toast progress bar\n   */ progressClassName: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object)\n    ]),\n    /**\n   * An optional style for the toast progress bar\n   */ progressStyle: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().object),\n    /**\n   * Define enter and exit transition using react-transition-group\n   */ transition: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    /**\n   * Support rtl display\n   */ rtl: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Allow toast to be draggable\n   */ draggable: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * The percentage of the toast's width it takes for a drag to dismiss a toast\n   */ draggablePercent: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    /**\n   * Pause the toast on focus loss\n   */ pauseOnFocusLoss: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Show the toast only if it includes containerId and it's the same as containerId\n   */ enableMultiContainer: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    /**\n   * Set id to handle multiple container\n   */ containerId: prop_types__WEBPACK_IMPORTED_MODULE_7___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n        (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number)\n    ]),\n    /**\n   * Set role attribute for the toast body\n   */ role: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    /**\n   * Fired when clicking inside toaster\n   */ onClick: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)\n};\nToastContainer.defaultProps = {\n    position: POSITION.TOP_RIGHT,\n    transition: Bounce,\n    rtl: false,\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeButton: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(CloseButton, null),\n    pauseOnHover: true,\n    pauseOnFocusLoss: true,\n    closeOnClick: true,\n    newestOnTop: false,\n    draggable: true,\n    draggablePercent: 80,\n    className: null,\n    style: null,\n    toastClassName: null,\n    bodyClassName: null,\n    progressClassName: null,\n    progressStyle: null,\n    role: \"alert\"\n};\nvar containers = new Map();\nvar latestInstance = null;\nvar containerDomNode = null;\nvar containerConfig = {};\nvar queue = [];\nvar lazy = false;\n/**\n * Check whether any container is currently mounted in the DOM\n */ function isAnyContainerMounted() {\n    return containers.size > 0;\n}\n/**\n * Get the container by id. Returns the last container declared when no id is given.\n */ function getContainer(containerId) {\n    if (!isAnyContainerMounted()) return null;\n    if (!containerId) return containers.get(latestInstance);\n    return containers.get(containerId);\n}\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */ function getToast(toastId, _ref) {\n    var containerId = _ref.containerId;\n    var container = getContainer(containerId);\n    if (!container) return null;\n    var toast = container.collection[toastId];\n    if (typeof toast === \"undefined\") return null;\n    return toast;\n}\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */ function mergeOptions(options, type) {\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, {\n        type: type,\n        toastId: getToastId(options)\n    });\n}\n/**\n * Generate a random toastId\n */ function generateToastId() {\n    return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);\n}\n/**\n * Generate a toastId or use the one provided\n */ function getToastId(options) {\n    if (options && (typeof options.toastId === \"string\" || typeof options.toastId === \"number\" && !isNaN(options.toastId))) {\n        return options.toastId;\n    }\n    return generateToastId();\n}\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */ function dispatchToast(content, options) {\n    if (isAnyContainerMounted()) {\n        eventManager.emit(ACTION.SHOW, content, options);\n    } else {\n        queue.push({\n            action: ACTION.SHOW,\n            content: content,\n            options: options\n        });\n        if (lazy && canUseDom) {\n            lazy = false;\n            containerDomNode = document.createElement(\"div\");\n            document.body.appendChild(containerDomNode);\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_5__.render)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ToastContainer, containerConfig), containerDomNode);\n        }\n    }\n    return options.toastId;\n}\nvar toast = function toast(content, options) {\n    return dispatchToast(content, mergeOptions(options, options && options.type || TYPE.DEFAULT));\n};\n/**\n * For each available type create a shortcut\n */ var _loop = function _loop(t) {\n    if (TYPE[t] !== TYPE.DEFAULT) {\n        toast[TYPE[t].toLowerCase()] = function(content, options) {\n            return dispatchToast(content, mergeOptions(options, options && options.type || TYPE[t]));\n        };\n    }\n};\nfor(var t in TYPE){\n    _loop(t);\n}\n/**\n * Maybe I should remove warning in favor of warn, I don't know\n */ toast.warn = toast.warning;\n/**\n * Remove toast programmaticaly\n */ toast.dismiss = function(id) {\n    if (id === void 0) {\n        id = null;\n    }\n    return isAnyContainerMounted() && eventManager.emit(ACTION.CLEAR, id);\n};\n/**\n * return true if one container is displaying the toast\n */ toast.isActive = function(id) {\n    var isToastActive = false;\n    if (containers.size > 0) {\n        containers.forEach(function(container) {\n            if (container.isToastActive(id)) {\n                isToastActive = true;\n            }\n        });\n    }\n    return isToastActive;\n};\ntoast.update = function(toastId, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    // if you call toast and toast.update directly nothing will be displayed\n    // this is why I defered the update\n    setTimeout(function() {\n        var toast = getToast(toastId, options);\n        if (toast) {\n            var oldOptions = toast.options, oldContent = toast.content;\n            var nextOptions = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, oldOptions, {}, options, {\n                toastId: options.toastId || toastId\n            });\n            if (!options.toastId || options.toastId === toastId) {\n                nextOptions.updateId = generateToastId();\n            } else {\n                nextOptions.staleToastId = toastId;\n            }\n            var content = typeof nextOptions.render !== \"undefined\" ? nextOptions.render : oldContent;\n            delete nextOptions.render;\n            dispatchToast(content, nextOptions);\n        }\n    }, 0);\n};\n/**\n * Used for controlled progress bar.\n */ toast.done = function(id) {\n    toast.update(id, {\n        progress: 1\n    });\n};\n/**\n * Track changes. The callback get the number of toast displayed\n */ toast.onChange = function(callback) {\n    if (typeof callback === \"function\") {\n        eventManager.on(ACTION.ON_CHANGE, callback);\n    }\n};\n/**\n * Configure the ToastContainer when lazy mounted\n */ toast.configure = function(config) {\n    lazy = true;\n    containerConfig = config;\n};\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */ eventManager.on(ACTION.DID_MOUNT, function(containerInstance) {\n    latestInstance = containerInstance.props.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n    queue.forEach(function(item) {\n        eventManager.emit(item.action, item.content, item.options);\n    });\n    queue = [];\n}).on(ACTION.WILL_UNMOUNT, function(containerInstance) {\n    if (containerInstance) containers.delete(containerInstance.props.containerId || containerInstance);\n    else containers.clear();\n    if (containers.size === 0) {\n        eventManager.off(ACTION.SHOW).off(ACTION.CLEAR);\n    }\n    if (canUseDom && containerDomNode) {\n        document.body.removeChild(containerDomNode);\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-toastify/esm/react-toastify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-toastify/dist/ReactToastify.css":
/*!************************************************************!*\
  !*** ./node_modules/react-toastify/dist/ReactToastify.css ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"9f09a38b44da\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9hc3RpZnkvZGlzdC9SZWFjdFRvYXN0aWZ5LmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9kaXN0L1JlYWN0VG9hc3RpZnkuY3NzPzkwNzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI5ZjA5YTM4YjQ0ZGFcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-toastify/dist/ReactToastify.css\n");

/***/ })

};
;